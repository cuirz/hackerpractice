package main

//37. 解数独
//编写一个程序，通过已填充的空格来解决数独问题。
//
//一个数独的解法需遵循如下规则：
//
//数字1-9在每一行只能出现一次。
//数字1-9在每一列只能出现一次。
//数字1-9在每一个以粗实线分隔的3x3宫内只能出现一次。
//空白格用'.'表示。

func solveSudoku(board [][]byte) {
	var col [9][9]bool
	var row [9][9]bool
	var block [3][3][9]bool
	var space [][2]int
	// 填充
	for i := 0; i < 9; i++ {
		for j := 0; j < 9; j++ {
			if board[i][j] == '.' {
				space = append(space, [2]int{i, j})
			} else {
				num := board[i][j] - '1'
				col[j][num] = true
				row[i][num] = true
				block[i/3][j/3][num] = true
			}
		}
	}
	var dfs func(index int) bool
	dfs = func(index int) bool {
		if index == len(space) {
			return true
		}
		i, j := space[index][0], space[index][1]
		for num := 0; num < 9; num++ {
			if !col[j][num] && !row[i][num] && !block[i/3][j/3][num] {
				col[j][num] = true
				row[i][num] = true
				block[i/3][j/3][num] = true
				board[i][j] = byte(num) + '1'
				if dfs(index + 1) {
					return true
				}
				col[j][num] = false
				row[i][num] = false
				block[i/3][j/3][num] = false
			}

		}
		return false
	}
	dfs(0)
}

func main() {
	solveSudoku(
		[][]byte{
			{'5', '3', '.', '.', '7', '.', '.', '.', '.'}, {'6', '.', '.', '1', '9', '5', '.', '.', '.'}, {'.', '9', '8', '.', '.', '.', '.', '6', '.'}, {'8', '.', '.', '.', '6', '.', '.', '.', '3'}, {'4', '.', '.', '8', '.', '3', '.', '.', '1'}, {'7', '.', '.', '.', '2', '.', '.', '.', '6'}, {'.', '6', '.', '.', '.', '.', '2', '8', '.'}, {'.', '.', '.', '4', '1', '9', '.', '.', '5'}, {'.', '.', '.', '.', '8', '.', '.', '7', '9'},
		})
	//{{'5','3','.','.','7','.','.','.','.'},{'6','.','.','1','9','5','.','.','.'},{'.','9','8','.','.','.','.','6','.'},{'8','.','.','.','6','.','.','.','3'},{'4','.','.','8','.','3','.','.','1'},{'7','.','.','.','2','.','.','.','6'},{'.','6','.','.','.','.','2','8','.'},{'.','.','.','4','1','9','.','.','5'},{'.','.','.','.','8','.','.','7','9'}}
}
