package main

import "sort"

//668. 乘法表中第k小的数几乎每一个人都用乘法表。但是你能在乘法表中快速找到第k小的数字吗？
//
//给定高度m、宽度n 的一张m * n的乘法表，以及正整数k，你需要返回表中第k小的数字。
//
//例1：
//
//输入: m = 3, n = 3, k = 5
//输出: 3
//解释:
//乘法表:
//1	2	3
//2	4	6
//3	6	9
//
//第5小的数字是 3 (1, 2, 2, 3, 3).
//例 2：
//
//输入: m = 2, n = 3, k = 6
//输出: 6
//解释:
//乘法表:
//1	2	3
//2	4	6
//
//第6小的数字是 6 (1, 2, 2, 3, 4, 6).
//注意：
//
//m 和n的范围在 [1, 30000] 之间。
//k 的范围在 [1, m * n] 之间。

//二分查找
// 每行 min(x/i,n),
// 每行 大于 x/i 时，不用比较直接可以相加
// 第i行之前都小于x   那么 i <= x/n
// count = x/n * n 把小于x的i行都相加

func findKthNumber(m int, n int, k int) int {
	return sort.Search(m*n, func(x int) bool {
		count := x / n * n
		for i := x/n + 1; i <= m; i++ {
			count += x / i
		}
		return count >= k
	})
}
