package main

//96. 不同的二叉搜索树
//给定一个整数 n，求以1 ...n为节点组成的二叉搜索树有多少种？
//
//示例:
//
//输入: 3
//输出: 5
//解释:
//给定 n = 3, 一共有 5 种不同结构的二叉搜索树:
//
//1         3     3      2      1
//\       /     /      / \      \
//3     2     1      1   3      2
///     /       \                 \
//2     1         2                 3

//思路 动态规划
//g(n):长度为 n 的序列能构成的不同二叉搜索树的个数
//f(i,n):以i为根、序列长度为n的不同二叉搜索树个数
//g(n)是遍历所有f(i,n)的之和
//f(i,n)=g(i-1) * g(n-i)

func numTrees(n int) int {
	dp := make([]int, n+1)
	dp[0], dp[1] = 1, 1
	for i := 2; i <= n; i++ {
		for j := 1; j <= i; j++ {
			dp[i] += dp[j-1] * dp[i-j]
		}
	}
	return dp[n]
}
